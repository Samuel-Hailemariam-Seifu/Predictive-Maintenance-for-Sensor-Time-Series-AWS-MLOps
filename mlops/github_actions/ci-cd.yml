name: CI/CD Pipeline for Predictive Maintenance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC for model retraining
    - cron: "0 2 * * *"

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: "3.9"

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black mypy

      - name: Lint with flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        run: |
          black --check src/

      - name: Type check with mypy
        run: |
          mypy src/ --ignore-missing-imports

      - name: Run tests
        run: |
          pytest tests/ -v --cov=src/ --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  # Data Validation
  data-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run data validation
        run: |
          python -m src.data_pipeline.data_validation --bucket ${{ secrets.S3_DATA_BUCKET }}

  # Model Training and Validation
  model-training:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    needs: [test, security]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download training data
        run: |
          aws s3 sync s3://${{ secrets.S3_DATA_BUCKET }}/training-data/ data/training/

      - name: Train models
        run: |
          python -m src.models.train_models --config config/model_config.yaml

      - name: Validate models
        run: |
          python -m src.models.validate_models --data data/validation/ --models models/

      - name: Upload model artifacts
        run: |
          aws s3 sync models/ s3://${{ secrets.S3_MODELS_BUCKET }}/models/$(date +%Y%m%d_%H%M%S)/

      - name: Update model registry
        run: |
          python -m src.aws.sagemaker_integration --action register --model-path s3://${{ secrets.S3_MODELS_BUCKET }}/models/$(date +%Y%m%d_%H%M%S)/

  # Model Deployment
  model-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [model-training]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging
        run: |
          python -m src.aws.deployment --environment staging --deploy-models

      - name: Run integration tests
        run: |
          python -m tests.integration.test_api --environment staging

      - name: Deploy to production
        if: success()
        run: |
          python -m src.aws.deployment --environment production --deploy-models

      - name: Run smoke tests
        run: |
          python -m tests.e2e.test_smoke --environment production

  # Infrastructure Deployment
  infrastructure:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var="environment=production"

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve -var="environment=production"

  # Monitoring and Alerting
  monitoring:
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update monitoring dashboards
        run: |
          python -m src.monitoring.update_dashboards --environment production

      - name: Send deployment notification
        if: always()
        run: |
          python -m src.monitoring.send_notification --status ${{ job.status }} --pipeline ${{ github.workflow }}

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs:
      [
        test,
        security,
        data-validation,
        model-training,
        model-deployment,
        infrastructure,
        monitoring,
      ]

    steps:
      - uses: actions/checkout@v3

      - name: Clean up temporary resources
        run: |
          echo "Cleaning up temporary resources..."
          # Add cleanup logic here
